import ast
import os
import ipaddress
import asyncio

from aiogram.exceptions import TelegramNetworkError
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from time import time

from bot_db.mycloud_db import db_table_val, user_data, user_id, delete_user_ip
from dotenv.main import load_dotenv

load_dotenv()

token = os.environ.get('BOT_TOKEN')
dp = Dispatcher()
bot = Bot(token, parse_mode="HTML")


@dp.message(Command(commands=["start"]))
async def welcome(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞"),
        types.KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Ä–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Å–≤–µ—Ç–∞")
    )
    builder.row(
        types.KeyboardButton(
            text="C–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∞–¥—Ä–µ—Å–æ–≤",
            callback_data='ip_list'))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –°–≤–µ—Ç–û—á–∫–∞ —É —Ç–µ–±—è –¥–æ–º–∞.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(Command(commands=["help"]))
async def help_text_command(message: types.Message):
    await message.answer(
        "–°–≤–æ–π ip –∞–¥—Ä–µ—Å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç—É—Ç https://2ip.ua"
    )


@dp.message(lambda message: message.text ==
            "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞")
async def help_text_message(message: types.Message):
    await message.answer(
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –± –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞, –≤–≤–µ–¥–∏ /add –∏ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç 0.0.0.0 –¥–æ 255.255.255.255 –ø–ª—é—Å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞\n"
        "–¢—ã–∫–Ω–∏ /help —á—Ç–æ –± —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ip –∞–¥—Ä–µ—Å"
    )


@dp.message(lambda message: message.text ==
            "–°–¥–µ–ª–∞—Ç—å —Ä–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Å–≤–µ—Ç–∞")
async def check_lighting(message: types.Message):
    await message.answer(
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≥–¥–µ —É–≥–æ–¥–Ω–æ —Å–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /ip –∏ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç 0.0.0.0 –¥–æ 255.255.255.255\n"
        "–¢—ã–∫–Ω–∏ /help —á—Ç–æ –± —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ip –∞–¥—Ä–µ—Å"
    )


@dp.message(Command(commands=['ip_list']))
@dp.message(lambda message: message.text == "C–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∞–¥—Ä–µ—Å–æ–≤")
async def list_of_user_ips(message: types.Message):
    user_ips = await user_data(message.chat.id)
    builder = InlineKeyboardBuilder()
    if len(user_ips) != 0:
        for ip in user_ips:
            builder.add(types.InlineKeyboardButton(
                text=f"{ip[1]} - {ip[2]}",
                callback_data=f"ip {ip[1]} {ip[0]}")
            )
            builder.add(types.InlineKeyboardButton(
                text="‚ùå",
                callback_data="['del', '" + str(ip[0]) + "']")
            )
        builder.adjust(2)
        await message.answer(
            "–≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—å—Å—è –Ω–∞–ª–∏—á–∏–µ —Å–≤–µ—Ç–∞.\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –∞–¥—Ä–µ—Å –¥–ª—è —Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ ‚ùå –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞.",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞.\n"
            "–í–≤–µ–¥–∏ /add –∏ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç 0.0.0.0 –¥–æ 255.255.255.255 –ø–ª—é—Å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
        )


@dp.message(Command(commands=['add']))
async def add_ip_to_db(message: types.Message):
    try:
        if ipaddress.ip_address(
                message.text.split()[1]) and len(
                message.text.split()) >= 3:
            message_to_user = await message.answer('–ù–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω')
            result = await icmp_ping(message.text.split()[1])
            now_time_sec = time()
            if '–ü–æ—Ö–æ–∂–µ' in result:
                await db_table_val(
                    user_id=message.from_user.id,
                    username=message.from_user.username,
                    user_ip=''.join(message.text.split()[1]),
                    description_ip=' '.join(message.text.split()[2:]),
                    time_check=now_time_sec,
                    light_status=0
                )
                await message_to_user.edit_text(
                    "–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–µ—Ç–∞"
                )
            else:
                await db_table_val(
                    user_id=message.from_user.id,
                    username=message.from_user.username,
                    user_ip=''.join(message.text.split()[1]),
                    description_ip=' '.join(message.text.split()[2:]),
                    time_check=now_time_sec,
                    light_status=1
                )
                await message_to_user.edit_text(
                    "–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–µ—Ç–∞"
                )
        else:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞, –≤–≤–µ–¥–∏ /add –∏ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç 0.0.0.0 –¥–æ 255.255.255.255 –ø–ª—é—Å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"
            )
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞, –≤–≤–µ–¥–∏ /add –∏ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç 0.0.0.0 –¥–æ 255.255.255.255 –ø–ª—é—Å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"
        )


async def icmp_ping(ip):
    process = await asyncio.create_subprocess_shell(
        f"ping {ip} -c 4", stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()
    print(stdout.decode())
    if process.returncode == 0:
        return '–ü–æ—Ö–æ–∂–µ —Å–≤–µ—Ç –µ—Å—Ç—å, —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ'
    elif 'Destination Host Unreachable' in stdout.decode():
        return '–ü–æ—Ö–æ–∂–µ —Å–≤–µ—Ç –µ—Å—Ç—å, —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ'

    return "–°–≤–µ—Ç–∞ –Ω–µ—Ç, –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ –¥—É–º–∞—Ç—å"


async def icmp_check(message: types.Message):
    ip = message.split()[1]
    user = await user_id(message.split()[2])
    waiting_message = await bot.send_message(chat_id=user, text=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É {ip} ...")
    try:
        result = await icmp_ping(ip)
        if result:
            await waiting_message.edit_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É {ip}:\n{result}")
        else:
            await waiting_message.edit_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É {ip}:\n–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    except Exception as e:
        await waiting_message.edit_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É {ip}:\n{e}")


@dp.message(Command(commands=['ip']))
async def icmp_command_check(message: types.Message):
    try:
        if ipaddress.ip_address(message.text.split('/ip ')[1]):
            ip = message.text.split('/ip ')[1]
            message_answer = await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É {ip} ...")
            try:
                result = await icmp_ping(ip)
                if result:
                    await message_answer.edit_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É {ip}:\n{result}")
                else:
                    await message_answer.edit_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É {ip}:\n–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            except Exception as e:
                await message_answer.edit_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É {ip}:\n{e}")

    except IndexError:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, /ip –∑–∞—Ç–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω IP-–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ ‚Äì —ç—Ç–æ –∞–¥—Ä–µ—Å–∞ –æ—Ç 0.0.0.0 –¥–æ 255.255.255.255"
        )
    except ValueError:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω IP-–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ ‚Äì —ç—Ç–æ –∞–¥—Ä–µ—Å–∞ –æ—Ç 0.0.0.0 –¥–æ 255.255.255.255"
        )


@dp.callback_query(lambda call: True)
async def callback_inline(call):
    if call.data.startswith("['del'"):
        await delete_user_ip(ast.literal_eval(call.data)[1])
        await call.message.answer(
            "–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        )
        await list_of_user_ips(call.message)
    if call.data.startswith("ip"):
        await icmp_check(call.data)


@dp.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "–Ø –ø–æ–¥—Ä–æ—Å, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –µ—â—ë —Ç—É–ø–æ–≤–∞—Ç—ã–π, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É '%s', –ø—Ä–æ—Å—Ç–∏ü•∫"
        % message.text
    )

if __name__ == '__main__':
    try:
        dp.run_polling(bot)
    except TelegramNetworkError:
        print('–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –±–æ—Ç –Ω–µ –≤–∫–ª—é—á–µ–Ω!')
